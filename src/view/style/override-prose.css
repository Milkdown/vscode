.prose :where(code):not(:where([class~="not-prose"] *))::before,
.prose :where(code):not(:where([class~="not-prose"] *))::after,
.prose :where(blockquote p:first-of-type):not(:where([class~="not-prose"] *))::before,
.prose :where(blockquote p:first-of-type):not(:where([class~="not-prose"] *))::after {
    content: "";
}

.prose :where(li):not(:where([class~="not-prose"] *)) {
    margin-top: 0.5em;
    margin-bottom: 0;
}

.prose :where(blockquote):not(:where([class~="not-prose"] *)) {
    font-style: inherit;
    font-weight: inherit;
}

.prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"] *)) {
    margin-top: 0.5em;
    margin-bottom: 0;
}

.prose ol,
.prose ul {
    list-style: none !important;
    padding: 0;
}

.prose, nav {
    font-size: var(--vscode-font-size);
}

.ProseMirror-separator {
    margin: 0 !important;
}

.prose li p {
    @apply !m-0 !leading-6;
}

.prose li p + p {
    @apply !mt-2;
}

.prose li.ProseMirror-selectednode {
    outline: 2px solid #8cf;
}

.prose li::after {
    all: unset !important;
}

.prose br[data-is-inline="true"],
.prose br[data-is-inline="true"]::after {
    content: ' '
}

.ProseMirror-gapcursor {
    display: none;
    pointer-events: none;
    position: absolute;
}

.ProseMirror-gapcursor:after {
    content: "";
    display: block;
    position: absolute;
    top: -2px;
    width: 20px;
    border-top: 1px solid var(--vscode-editorCursor-foreground);
    animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
    to {
        visibility: hidden;
    }
}

.ProseMirror-focused .ProseMirror-gapcursor {
    display: block;
}
